#include <iostream>
#include <stack>
#include <string>
#include <cctype>
using namespace std;
bool isOperator(char c) {
return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
}
int precedence(char c) {
if (c == '^')
return 3;
else if (c == '*' || c == '/')
return 2;
else if (c == '+' || c == '-')
return 1;
else
return -1; // for '('
}
string infixToPostfix(string infix) {
stack<char> stk;
string postfix = "";
for (size_t i = 0; i < infix.size(); i++) {
char c = infix[i];
if (isalnum(c)) {
postfix += c;
} else if (c == '(') { 
stk.push(c);
} else if (c == ')') { 
while (!stk.empty() && stk.top() != '(') {
postfix += stk.top();
stk.pop();
}
if (!stk.empty())
stk.pop(); 
} else { 
while (!stk.empty() && precedence(c) <= precedence(stk.top())) {
postfix += stk.top();
stk.pop();
}
stk.push(c); 
}
}
while (!stk.empty()) {
postfix += stk.top();
stk.pop();
}
return postfix;
}
int main() {
string infix;
cout << "Enter an infix expression: ";
getline(cin, infix);

string postfix = infixToPostfix(infix);
cout << "Postfix expression: " << postfix << endl;
return 0;
}
