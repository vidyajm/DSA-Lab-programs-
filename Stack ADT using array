#include<iostream>
using namespace std;

class Stack {
private:
    int top;         
    int *arr;        

public:
    Stack(int size) {
        top = -1;              
        arr = new int[size];   
    }

    
    ~Stack() {
        delete[] arr;
    }

    
    bool isEmpty() {
        return (top == -1);
    }

    bool isFull(int size) {
        return (top == size - 1);
    }

    void push(int value, int size) {
        if (isFull(size)) {
            cout << "Stack Overflow! Cannot push more elements.\n";
            return;
        }
        arr[++top] = value;
        cout << value << " pushed to stack.\n";
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack Underflow! Cannot pop from an empty stack.\n";
            return;
        }
        cout << arr[top--] << " popped from stack.\n";
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty.\n";
            return;
        }
        cout << "Stack elements:\n";
        for (int i = top; i >= 0; i--) {
            cout << arr[i] << endl;
        }
    }
};


int main() {
    int size;
    cout << "Enter the size of the stack: ";
    cin >> size;

    
    Stack stack(size);

    int choice, value;

    do {
        cout << "\nStack Menu:\n";
        cout << "1. Push\n";
        cout << "2. Pop\n";
        cout << "3. Display\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to push: ";
                cin >> value;
                stack.push(value, size);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                stack.display();
                break;
            case 4:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    } while (choice != 4);

    return 0;
}
